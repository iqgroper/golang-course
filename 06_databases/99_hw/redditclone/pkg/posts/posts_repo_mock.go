// Code generated by MockGen. DO NOT EDIT.
// Source: posts/posts.go

// Package posts is a generated GoMock package.
package posts

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPostRepo is a mock of PostRepo interface.
type MockPostRepo struct {
	ctrl     *gomock.Controller
	recorder *MockPostRepoMockRecorder
}

// MockPostRepoMockRecorder is the mock recorder for MockPostRepo.
type MockPostRepoMockRecorder struct {
	mock *MockPostRepo
}

// NewMockPostRepo creates a new mock instance.
func NewMockPostRepo(ctrl *gomock.Controller) *MockPostRepo {
	mock := &MockPostRepo{ctrl: ctrl}
	mock.recorder = &MockPostRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostRepo) EXPECT() *MockPostRepoMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockPostRepo) Add(item *NewPost) (*Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", item)
	ret0, _ := ret[0].(*Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockPostRepoMockRecorder) Add(item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockPostRepo)(nil).Add), item)
}

// Delete mocks base method.
func (m *MockPostRepo) Delete(post_id string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", post_id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockPostRepoMockRecorder) Delete(post_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPostRepo)(nil).Delete), post_id)
}

// DownVote mocks base method.
func (m *MockPostRepo) DownVote(post_id, username string) (*Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownVote", post_id, username)
	ret0, _ := ret[0].(*Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownVote indicates an expected call of DownVote.
func (mr *MockPostRepoMockRecorder) DownVote(post_id, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownVote", reflect.TypeOf((*MockPostRepo)(nil).DownVote), post_id, username)
}

// GetAll mocks base method.
func (m *MockPostRepo) GetAll() ([]*Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockPostRepoMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockPostRepo)(nil).GetAll))
}

// GetAllByCategory mocks base method.
func (m *MockPostRepo) GetAllByCategory(category string) ([]*Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByCategory", category)
	ret0, _ := ret[0].([]*Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByCategory indicates an expected call of GetAllByCategory.
func (mr *MockPostRepoMockRecorder) GetAllByCategory(category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByCategory", reflect.TypeOf((*MockPostRepo)(nil).GetAllByCategory), category)
}

// GetByID mocks base method.
func (m *MockPostRepo) GetByID(post_id string) (*Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", post_id)
	ret0, _ := ret[0].(*Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockPostRepoMockRecorder) GetByID(post_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockPostRepo)(nil).GetByID), post_id)
}

// GetByUser mocks base method.
func (m *MockPostRepo) GetByUser(user_login string) ([]*Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUser", user_login)
	ret0, _ := ret[0].([]*Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUser indicates an expected call of GetByUser.
func (mr *MockPostRepoMockRecorder) GetByUser(user_login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUser", reflect.TypeOf((*MockPostRepo)(nil).GetByUser), user_login)
}

// UnVote mocks base method.
func (m *MockPostRepo) UnVote(post_id, username string) (*Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnVote", post_id, username)
	ret0, _ := ret[0].(*Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnVote indicates an expected call of UnVote.
func (mr *MockPostRepoMockRecorder) UnVote(post_id, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnVote", reflect.TypeOf((*MockPostRepo)(nil).UnVote), post_id, username)
}

// UpVote mocks base method.
func (m *MockPostRepo) UpVote(post_id, username string) (*Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpVote", post_id, username)
	ret0, _ := ret[0].(*Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpVote indicates an expected call of UpVote.
func (mr *MockPostRepoMockRecorder) UpVote(post_id, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpVote", reflect.TypeOf((*MockPostRepo)(nil).UpVote), post_id, username)
}
