// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	posts "redditclone/pkg/posts"

	mock "github.com/stretchr/testify/mock"
)

// PostRepo is an autogenerated mock type for the PostRepo type
type PostRepo struct {
	mock.Mock
}

// Add provides a mock function with given fields: item
func (_m *PostRepo) Add(item *posts.NewPost) (*posts.Post, error) {
	ret := _m.Called(item)

	var r0 *posts.Post
	if rf, ok := ret.Get(0).(func(*posts.NewPost) *posts.Post); ok {
		r0 = rf(item)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*posts.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*posts.NewPost) error); ok {
		r1 = rf(item)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: post_id
func (_m *PostRepo) Delete(post_id string) (bool, error) {
	ret := _m.Called(post_id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(post_id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(post_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DownVote provides a mock function with given fields: post_id, username
func (_m *PostRepo) DownVote(post_id string, username string) (*posts.Post, error) {
	ret := _m.Called(post_id, username)

	var r0 *posts.Post
	if rf, ok := ret.Get(0).(func(string, string) *posts.Post); ok {
		r0 = rf(post_id, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*posts.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(post_id, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *PostRepo) GetAll() ([]*posts.Post, error) {
	ret := _m.Called()

	var r0 []*posts.Post
	if rf, ok := ret.Get(0).(func() []*posts.Post); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*posts.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllByCategory provides a mock function with given fields: category
func (_m *PostRepo) GetAllByCategory(category string) ([]*posts.Post, error) {
	ret := _m.Called(category)

	var r0 []*posts.Post
	if rf, ok := ret.Get(0).(func(string) []*posts.Post); ok {
		r0 = rf(category)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*posts.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(category)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: post_id
func (_m *PostRepo) GetByID(post_id string) (*posts.Post, error) {
	ret := _m.Called(post_id)

	var r0 *posts.Post
	if rf, ok := ret.Get(0).(func(string) *posts.Post); ok {
		r0 = rf(post_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*posts.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(post_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByUser provides a mock function with given fields: user_login
func (_m *PostRepo) GetByUser(user_login string) ([]*posts.Post, error) {
	ret := _m.Called(user_login)

	var r0 []*posts.Post
	if rf, ok := ret.Get(0).(func(string) []*posts.Post); ok {
		r0 = rf(user_login)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*posts.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(user_login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnVote provides a mock function with given fields: post_id, username
func (_m *PostRepo) UnVote(post_id string, username string) (*posts.Post, error) {
	ret := _m.Called(post_id, username)

	var r0 *posts.Post
	if rf, ok := ret.Get(0).(func(string, string) *posts.Post); ok {
		r0 = rf(post_id, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*posts.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(post_id, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpVote provides a mock function with given fields: post_id, username
func (_m *PostRepo) UpVote(post_id string, username string) (*posts.Post, error) {
	ret := _m.Called(post_id, username)

	var r0 *posts.Post
	if rf, ok := ret.Get(0).(func(string, string) *posts.Post); ok {
		r0 = rf(post_id, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*posts.Post)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(post_id, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPostRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewPostRepo creates a new instance of PostRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPostRepo(t mockConstructorTestingTNewPostRepo) *PostRepo {
	mock := &PostRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
