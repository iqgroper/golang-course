// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	posts "redditclone/pkg/posts"

	mock "github.com/stretchr/testify/mock"

	user "redditclone/pkg/user"
)

// CommentRepo is an autogenerated mock type for the CommentRepo type
type CommentRepo struct {
	mock.Mock
}

// Add provides a mock function with given fields: post_id, body, _a2
func (_m *CommentRepo) Add(post_id string, body string, _a2 *user.User) (*posts.Comment, error) {
	ret := _m.Called(post_id, body, _a2)

	var r0 *posts.Comment
	if rf, ok := ret.Get(0).(func(string, string, *user.User) *posts.Comment); ok {
		r0 = rf(post_id, body, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*posts.Comment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *user.User) error); ok {
		r1 = rf(post_id, body, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: post_id, comment_id
func (_m *CommentRepo) Delete(post_id string, comment_id string) (bool, error) {
	ret := _m.Called(post_id, comment_id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(post_id, comment_id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(post_id, comment_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: post_id
func (_m *CommentRepo) GetAll(post_id string) ([]*posts.Comment, error) {
	ret := _m.Called(post_id)

	var r0 []*posts.Comment
	if rf, ok := ret.Get(0).(func(string) []*posts.Comment); ok {
		r0 = rf(post_id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*posts.Comment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(post_id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCommentRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewCommentRepo creates a new instance of CommentRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCommentRepo(t mockConstructorTestingTNewCommentRepo) *CommentRepo {
	mock := &CommentRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
